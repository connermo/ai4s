/*!
 * Bootstrap v5.1.3 (Simplified for Internal Network)
 * Minimal implementation of key Bootstrap components
 */

(function() {
'use strict';

// Bootstrap namespace
window.bootstrap = window.bootstrap || {};

// Modal component
class Modal {
  constructor(element, options = {}) {
    this.element = element;
    this.isShown = false;
    this.backdrop = null;
    
    // Setup modal
    this.element.style.display = 'none';
    this.element.classList.add('modal');
    
    // Event listeners
    this.element.addEventListener('click', (e) => {
      if (e.target === this.element) {
        this.hide();
      }
    });
    
    // Close button
    const closeButtons = this.element.querySelectorAll('[data-bs-dismiss="modal"]');
    closeButtons.forEach(btn => {
      btn.addEventListener('click', () => this.hide());
    });
  }
  
  show() {
    if (this.isShown) return;
    
    this.isShown = true;
    this.element.style.display = 'block';
    this.element.classList.add('show');
    
    // Create backdrop
    this.showBackdrop();
    
    // Trigger event
    const event = new Event('shown.bs.modal');
    this.element.dispatchEvent(event);
    
    // Focus management
    this.element.focus();
  }
  
  hide() {
    if (!this.isShown) return;
    
    this.isShown = false;
    this.element.classList.remove('show');
    
    setTimeout(() => {
      this.element.style.display = 'none';
      this.hideBackdrop();
      
      // Trigger event
      const event = new Event('hidden.bs.modal');
      this.element.dispatchEvent(event);
    }, 150);
  }
  
  showBackdrop() {
    this.backdrop = document.createElement('div');
    this.backdrop.className = 'modal-backdrop fade show';
    this.backdrop.style.cssText = `
      position: fixed;
      top: 0;
      left: 0;
      z-index: 1040;
      width: 100vw;
      height: 100vh;
      background-color: #000;
      opacity: 0.5;
    `;
    document.body.appendChild(this.backdrop);
    
    this.backdrop.addEventListener('click', () => this.hide());
  }
  
  hideBackdrop() {
    if (this.backdrop) {
      document.body.removeChild(this.backdrop);
      this.backdrop = null;
    }
  }
  
  static getInstance(element) {
    return element._modal || null;
  }
}

// Toast component
class Toast {
  constructor(element, options = {}) {
    this.element = element;
    this.options = { delay: 5000, ...options };
    this.isShown = false;
  }
  
  show() {
    if (this.isShown) return;
    
    this.isShown = true;
    this.element.classList.add('showing');
    
    setTimeout(() => {
      this.element.classList.remove('showing');
      this.element.classList.add('show');
    }, 10);
    
    // Auto hide
    if (this.options.delay > 0) {
      setTimeout(() => this.hide(), this.options.delay);
    }
  }
  
  hide() {
    if (!this.isShown) return;
    
    this.isShown = false;
    this.element.classList.remove('show');
    this.element.classList.add('hide');
    
    const event = new Event('hidden.bs.toast');
    this.element.dispatchEvent(event);
  }
}

// Tooltip component (minimal)
class Tooltip {
  constructor(element, options = {}) {
    this.element = element;
    this.options = options;
    this.tooltip = null;
    
    // Simple title attribute tooltip
    if (!this.element.title && this.element.dataset.bsTitle) {
      this.element.title = this.element.dataset.bsTitle;
    }
    
    // Setup events
    this.element.addEventListener('mouseenter', () => this.show());
    this.element.addEventListener('mouseleave', () => this.hide());
  }
  
  show() {
    if (this.tooltip) return;
    
    const title = this.element.title || this.element.dataset.bsTitle;
    if (!title) return;
    
    this.tooltip = document.createElement('div');
    this.tooltip.className = 'tooltip bs-tooltip-top show';
    
    // Apply custom class if specified
    const customClass = this.element.dataset.bsCustomClass;
    if (customClass) {
      this.tooltip.classList.add(customClass);
    }
    
    this.tooltip.innerHTML = `
      <div class="tooltip-arrow"></div>
      <div class="tooltip-inner">${title}</div>
    `;
    
    this.tooltip.style.cssText = `
      position: absolute;
      z-index: 1070;
      font-size: 0.875rem;
      opacity: 1;
      pointer-events: none;
    `;
    
    document.body.appendChild(this.tooltip);
    
    // Position tooltip
    this.position();
  }
  
  hide() {
    if (this.tooltip) {
      document.body.removeChild(this.tooltip);
      this.tooltip = null;
    }
  }
  
  position() {
    if (!this.tooltip) return;
    
    const rect = this.element.getBoundingClientRect();
    const tooltipRect = this.tooltip.getBoundingClientRect();
    
    const left = rect.left + (rect.width - tooltipRect.width) / 2;
    const top = rect.top - tooltipRect.height - 5;
    
    this.tooltip.style.left = left + 'px';
    this.tooltip.style.top = top + 'px';
  }
}

// Assign to bootstrap namespace
bootstrap.Modal = Modal;
bootstrap.Toast = Toast;
bootstrap.Tooltip = Tooltip;

// Auto-initialize modals with data attributes
document.addEventListener('DOMContentLoaded', function() {
  // Modal triggers
  document.addEventListener('click', function(e) {
    const trigger = e.target.closest('[data-bs-toggle="modal"]');
    if (trigger) {
      const target = trigger.getAttribute('data-bs-target');
      const modalElement = document.querySelector(target);
      if (modalElement) {
        if (!modalElement._modal) {
          modalElement._modal = new Modal(modalElement);
        }
        modalElement._modal.show();
      }
    }
  });
  
  // Toast close buttons
  document.addEventListener('click', function(e) {
    const closeBtn = e.target.closest('[data-bs-dismiss="toast"]');
    if (closeBtn) {
      const toast = closeBtn.closest('.toast');
      if (toast && toast._toast) {
        toast._toast.hide();
      }
    }
  });
  
  // Modal close buttons
  document.addEventListener('click', function(e) {
    const closeBtn = e.target.closest('[data-bs-dismiss="modal"]');
    if (closeBtn) {
      const modal = closeBtn.closest('.modal');
      if (modal && modal._modal) {
        modal._modal.hide();
      }
    }
  });
});

// Utility functions for compatibility
bootstrap.Modal.getOrCreateInstance = function(element) {
  if (!element._modal) {
    element._modal = new Modal(element);
  }
  return element._modal;
};

})();