# 基于NVIDIA CUDA 12.4 + cuDNN基础镜像
FROM nvidia/cuda:12.4.1-cudnn-devel-ubuntu22.04

# 设置环境变量（最稳定的层）
ENV DEBIAN_FRONTEND=noninteractive \
    TZ=Asia/Shanghai \
    LANG=C.UTF-8 \
    LC_ALL=C.UTF-8 \
    CONDA_ALWAYS_YES=true \
    CONDA_AUTO_ACTIVATE_BASE=false \
    CONDA_CHANNELS="conda-forge,pytorch,nvidia,defaults"

# 安装系统依赖（很少变化）
RUN apt-get update && apt-get install -y \
    curl \
    wget \
    git \
    vim \
    htop \
    tree \
    unzip \
    bzip2 \
    ca-certificates \
    software-properties-common \
    apt-transport-https \
    gnupg \
    lsb-release \
    openssh-server \
    sudo \
    locales \
    tzdata \
    haveged \
    && rm -rf /var/lib/apt/lists/*

# 配置时区（稳定）
RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone

# 安装Python 3.11（较稳定）
RUN add-apt-repository ppa:deadsnakes/ppa \
    && apt-get update \
    && apt-get install -y \
    python3.11 \
    python3.11-venv \
    python3.11-dev \
    python3.11-distutils \
    && rm -rf /var/lib/apt/lists/*

# 安装pip for Python 3.11（分离下载和安装）
RUN curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py \
    && python3.11 get-pip.py \
    && rm get-pip.py \
    && update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.11 100 \
    && update-alternatives --install /usr/bin/pip3 pip3 /usr/local/bin/pip3.11 100

# 安装Node.js 20.x LTS（较稳定）
RUN curl -fsSL https://deb.nodesource.com/setup_20.x | bash - \
    && apt-get install -y nodejs \
    && rm -rf /var/lib/apt/lists/*

# 升级pip并安装基础工具（稳定）
RUN pip3 install --upgrade pip setuptools wheel

# 安装Miniconda（稳定）
RUN wget -q https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O /tmp/miniconda.sh \
    && bash /tmp/miniconda.sh -b -p /opt/miniconda3 \
    && rm /tmp/miniconda.sh

# 设置conda环境变量和配置（稳定）
ENV PATH="/opt/miniconda3/bin:$PATH"
RUN conda init bash \
    && conda config --add channels conda-forge \
    && conda config --add channels pytorch \
    && conda config --add channels nvidia \
    && conda config --set show_channel_urls yes \
    && conda config --set auto_activate_base false \
    && conda config --set always_yes true \
    && conda config --set channel_priority strict \
    && conda clean -afy

# 创建额外的Python环境（预留给用户自定义使用）
RUN conda create -n ml python=3.11 -y && conda clean -afy

# 设置CUDA环境变量（稳定）
ENV CUDA_HOME=/usr/local/cuda \
    LD_LIBRARY_PATH=/usr/local/cuda/lib64:/usr/local/cuda/targets/x86_64-linux/lib:${LD_LIBRARY_PATH} \
    PATH=/usr/local/cuda/bin:${PATH}

# 安装基础科学计算包（版本相对稳定）
RUN pip3 install --no-cache-dir \
    "numpy>=1.24.0" \
    "pandas>=2.0.0" \
    "matplotlib>=3.7.0" \
    "scikit-learn>=1.3.0" \
    "seaborn>=0.11.0"

# 安装Jupyter相关包（版本相对稳定）
RUN pip3 install --no-cache-dir \
    "jupyter>=1.0.0" \
    "jupyterlab>=4.0.0" \
    "notebook>=6.5.0" \
    "ipywidgets>=8.0.0" \
    "ipykernel"

# 安装PyTorch（较大，单独一层）
RUN pip3 install --no-cache-dir torch==2.6.0 torchvision torchaudio --index-url https://download.pytorch.org/whl/cu124

# TensorFlow已移除，PyTorch作为主要深度学习框架
# 用户可在ml环境中根据需要自行安装TensorFlow

# 安装AI/ML相关包（版本可能变化）
RUN pip3 install --no-cache-dir \
    "opencv-python-headless>=4.5.0" \
    "plotly>=5.14.0" \
    "transformers>=4.20.0" \
    "datasets>=2.0.0" \
    "accelerate>=0.20.0"

# 安装Web框架包（版本可能变化）
RUN pip3 install --no-cache-dir \
    "wandb>=0.15.0" \
    "flask>=2.0.0" \
    "fastapi>=0.95.0" \
    "uvicorn>=0.20.0"

# 配置conda权限
RUN chmod -R 777 /opt/miniconda3/envs/ml \
    && mkdir -p /opt/miniconda3/pkgs && chmod -R 777 /opt/miniconda3/pkgs

# 创建CUDA库符号链接
RUN ln -sf /usr/lib/x86_64-linux-gnu/libcudnn* /usr/local/cuda/lib64/ 2>/dev/null || true \
    && ln -sf /usr/lib/x86_64-linux-gnu/libcuda.so.1 /usr/local/cuda/lib64/libcuda.so.1 \
    && ln -sf /usr/lib/x86_64-linux-gnu/libcuda.so.1 /usr/local/cuda/lib64/libcuda.so \
    && ldconfig

# 安装JupyterLab扩展（可能失败，不影响主要功能）
RUN jupyter labextension install @plotly/plotly-jupyterlab-extension --no-build || true \
    && jupyter lab build --dev-build=False --minimize=False || true

# 配置SSH（系统配置）
RUN mkdir /var/run/sshd \
    && echo 'root:root' | chpasswd \
    && sed -i 's/#PermitRootLogin prohibit-password/PermitRootLogin yes/' /etc/ssh/sshd_config \
    && sed -i 's/#PasswordAuthentication yes/PasswordAuthentication yes/' /etc/ssh/sshd_config \
    && echo "UseDNS no" >> /etc/ssh/sshd_config \
    && echo "GSSAPIAuthentication no" >> /etc/ssh/sshd_config \
    && service haveged start \
    && ssh-keygen -A \
    && service haveged stop

# 创建工作目录
RUN mkdir -p /shared /workspace && chmod 755 /shared /workspace

# 安装code-server（可能变化的外部依赖）
RUN curl -fsSL https://code-server.dev/install.sh | sh

# 创建code-server扩展目录并预安装常用扩展
RUN mkdir -p /tmp/extensions \
    && echo "开始安装VSCode扩展..." \
    && code-server --install-extension ms-python.python --extensions-dir /tmp/extensions --force \
    && code-server --install-extension ms-toolsai.jupyter --extensions-dir /tmp/extensions --force \
    && code-server --install-extension ms-vscode.vscode-json --extensions-dir /tmp/extensions --force \
    && code-server --install-extension redhat.vscode-yaml --extensions-dir /tmp/extensions --force \
    && (code-server --install-extension ms-python.pylint --extensions-dir /tmp/extensions --force || echo "pylint安装失败") \
    && (code-server --install-extension ms-python.black-formatter --extensions-dir /tmp/extensions --force || echo "black-formatter安装失败") \
    && (code-server --install-extension GitHub.copilot --extensions-dir /tmp/extensions --force || echo "copilot安装失败") \
    && echo "扩展安装完成，目录内容:" && ls -la /tmp/extensions/ \
    && chmod -R 755 /tmp/extensions

# 复制脚本文件（最经常变化的部分，放在最后）
COPY docker/entrypoint.sh /usr/local/bin/entrypoint.sh
COPY docker/test_environments.sh /usr/local/bin/test_environments.sh
COPY debug-vscode-extensions.sh /usr/local/bin/debug-vscode-extensions.sh
COPY docker/change-password.sh /usr/local/bin/change-password.sh
RUN chmod +x /usr/local/bin/entrypoint.sh /usr/local/bin/test_environments.sh /usr/local/bin/change-password.sh /usr/local/bin/debug-vscode-extensions.sh

# 暴露端口
EXPOSE 22 8080 8888 6006

# 设置启动脚本
ENTRYPOINT ["/usr/local/bin/entrypoint.sh"]