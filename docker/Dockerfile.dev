# 基于NVIDIA CUDA镜像
FROM nvidia/cuda:12.4.1-cudnn-devel-ubuntu22.04

# 设置环境变量
ENV DEBIAN_FRONTEND=noninteractive
ENV TZ=Asia/Shanghai
ENV LANG=C.UTF-8
ENV LC_ALL=C.UTF-8

# 安装系统依赖
RUN apt-get update && apt-get install -y \
    curl \
    wget \
    git \
    vim \
    htop \
    tree \
    unzip \
    software-properties-common \
    apt-transport-https \
    ca-certificates \
    gnupg \
    lsb-release \
    openssh-server \
    sudo \
    locales \
    tzdata \
    python3 \
    python3-pip \
    python3-venv \
    && rm -rf /var/lib/apt/lists/*

# 安装Node.js 20.x LTS
RUN curl -fsSL https://deb.nodesource.com/setup_20.x | bash - \
    && apt-get install -y nodejs

# 配置时区
RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone

# 安装Python依赖
RUN pip3 install --upgrade pip setuptools wheel

# 安装Miniconda
RUN wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O /tmp/miniconda.sh \
    && bash /tmp/miniconda.sh -b -p /opt/miniconda3 \
    && rm /tmp/miniconda.sh \
    && /opt/miniconda3/bin/conda clean -afy

# 配置conda环境
ENV PATH="/opt/miniconda3/bin:$PATH"
RUN conda init bash \
    && conda config --set auto_activate_base false \
    && conda update -n base -c defaults conda

# 创建Python 3.11开发环境（更好的包兼容性）
RUN conda create -n py311 python=3.11 -y \
    && conda clean -afy

# 安装基础Python包（Python 3.11兼容版本）
RUN pip3 install --upgrade pip \
    && pip3 install \
    "numpy>=1.24.0,<2.0" \
    "pandas>=2.0.0" \
    "matplotlib>=3.7.0" \
    "scikit-learn>=1.3.0" \
    "jupyter>=1.0.0" \
    "jupyterlab>=4.0.0" \
    "requests>=2.28.0" \
    "pillow>=9.0.0" \
    "tqdm>=4.65.0" \
    "ipywidgets>=8.0.0" \
    "notebook>=6.5.0"

# 安装PyTorch with CUDA 12.1 support
RUN pip3 install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu121

# 安装TensorFlow with GPU support
RUN pip3 install "tensorflow[and-cuda]>=2.13.0,<2.16.0"

# 安装其他常用AI/ML包
RUN pip3 install \
    "opencv-python-headless>=4.5.0" \
    "tensorboard>=2.13.0" \
    "plotly>=5.14.0" \
    "seaborn>=0.11.0" \
    "transformers>=4.20.0" \
    "datasets>=2.0.0" \
    "accelerate>=0.20.0" \
    "wandb>=0.15.0" \
    "flask>=2.0.0" \
    "fastapi>=0.95.0" \
    "uvicorn>=0.20.0"

# 安装JupyterLab的Plotly扩展
RUN jupyter labextension install @plotly/plotly-jupyterlab-extension --no-build || true
RUN jupyter lab build --dev-build=False --minimize=False || true

# Node.js和npm已安装，验证版本
RUN node --version && npm --version

# 配置SSH
RUN mkdir /var/run/sshd
RUN echo 'root:root' | chpasswd
RUN sed -i 's/#PermitRootLogin prohibit-password/PermitRootLogin yes/' /etc/ssh/sshd_config
RUN sed -i 's/#PasswordAuthentication yes/PasswordAuthentication yes/' /etc/ssh/sshd_config

# 创建工作目录
RUN mkdir -p /shared /workspace
RUN chmod 755 /shared /workspace

# 下载并安装code-server (VSCode Server)
RUN curl -fsSL https://code-server.dev/install.sh | sh

# 复制启动脚本
COPY entrypoint.sh /usr/local/bin/entrypoint.sh
RUN chmod +x /usr/local/bin/entrypoint.sh

# 暴露端口
# SSH: 22
# VSCode Server: 8080  
# Jupyter Lab: 8888
# TensorBoard: 6006
EXPOSE 22 8080 8888 6006

# 设置启动脚本
ENTRYPOINT ["/usr/local/bin/entrypoint.sh"]