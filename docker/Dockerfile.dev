# 基于NVIDIA NGC PyTorch镜像（包含PyTorch + CUDA + Python）
FROM nvcr.io/nvidia/pytorch:25.06-py3

# 设置环境变量
ENV DEBIAN_FRONTEND=noninteractive
ENV TZ=Asia/Shanghai
ENV LANG=C.UTF-8
ENV LC_ALL=C.UTF-8

# 优化conda安装的环境变量
ENV CONDA_ALWAYS_YES=true
ENV CONDA_AUTO_ACTIVATE_BASE=false
ENV CONDA_CHANNELS="conda-forge,pytorch,nvidia,defaults"

# 安装系统依赖
RUN apt-get update && apt-get install -y \
    curl \
    wget \
    git \
    vim \
    htop \
    tree \
    unzip \
    bzip2 \
    ca-certificates \
    software-properties-common \
    apt-transport-https \
    gnupg \
    lsb-release \
    openssh-server \
    sudo \
    locales \
    tzdata \
    && rm -rf /var/lib/apt/lists/*

# NGC镜像已包含Python和PyTorch，跳过Python安装

# 安装Node.js 20.x LTS
RUN curl -fsSL https://deb.nodesource.com/setup_20.x | bash - \
    && apt-get install -y nodejs \
    && rm -rf /var/lib/apt/lists/*

# 配置时区
RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone

# 安装Miniconda（仅用于包管理，不创建额外环境）
RUN wget -q https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O /tmp/miniconda.sh \
    && bash /tmp/miniconda.sh -b -p /opt/miniconda3 \
    && rm /tmp/miniconda.sh

# 配置conda环境（优化设置，但只使用base环境）
ENV PATH="/opt/miniconda3/bin:$PATH"
RUN conda init bash \
    && conda config --add channels conda-forge \
    && conda config --add channels pytorch \
    && conda config --add channels nvidia \
    && conda config --set show_channel_urls yes \
    && conda config --set auto_activate_base false \
    && conda config --set always_yes true \
    && conda config --set channel_priority strict \
    && conda clean -afy

# 升级pip并安装基础工具（Docker缓存友好）
RUN pip3 install --upgrade pip setuptools wheel

# 安装Jupyter相关包（第一层，经常使用）
RUN pip3 install --no-cache-dir \
    "jupyter>=1.0.0" \
    "jupyterlab>=4.0.0" \
    "notebook>=6.5.0" \
    "ipywidgets>=8.0.0" \
    "ipykernel"

# 安装基础科学计算包（第二层，相对稳定）
RUN pip3 install --no-cache-dir \
    "numpy>=1.24.0,<2.0" \
    "pandas>=2.0.0" \
    "matplotlib>=3.7.0" \
    "scikit-learn>=1.3.0" \
    "requests>=2.28.0" \
    "pillow>=9.0.0" \
    "tqdm>=4.65.0" \
    "seaborn>=0.11.0"

# NGC镜像已包含PyTorch，跳过安装

# 安装TensorFlow（第四层，另一个大型包）
RUN pip3 install --no-cache-dir "tensorflow[and-cuda]>=2.13.0,<2.16.0"

# 安装CV和其他AI包（第五层）
RUN pip3 install --no-cache-dir \
    "opencv-python-headless>=4.5.0" \
    "tensorboard>=2.13.0" \
    "plotly>=5.14.0"

# 安装NLP和模型相关包（第六层）
RUN pip3 install --no-cache-dir \
    "transformers>=4.20.0" \
    "datasets>=2.0.0" \
    "accelerate>=0.20.0" \
    "wandb>=0.15.0"

# 安装Web框架（第七层，开发工具）
RUN pip3 install --no-cache-dir \
    "flask>=2.0.0" \
    "fastapi>=0.95.0" \
    "uvicorn>=0.20.0"

# 安装JupyterLab扩展和配置（合并操作）
RUN jupyter labextension install @plotly/plotly-jupyterlab-extension --no-build || true \
    && jupyter lab build --dev-build=False --minimize=False || true \
    # 验证Node.js版本
    && node --version && npm --version \
    # 配置SSH
    && mkdir /var/run/sshd \
    && echo 'root:root' | chpasswd \
    && sed -i 's/#PermitRootLogin prohibit-password/PermitRootLogin yes/' /etc/ssh/sshd_config \
    && sed -i 's/#PasswordAuthentication yes/PasswordAuthentication yes/' /etc/ssh/sshd_config \
    # 创建工作目录
    && mkdir -p /shared /workspace \
    && chmod 755 /shared /workspace \
    # 下载并安装code-server
    && curl -fsSL https://code-server.dev/install.sh | sh

# 复制启动脚本
COPY entrypoint.sh /usr/local/bin/entrypoint.sh
RUN chmod +x /usr/local/bin/entrypoint.sh

# 暴露端口
# SSH: 22
# VSCode Server: 8080  
# Jupyter Lab: 8888
# TensorBoard: 6006
EXPOSE 22 8080 8888 6006

# 设置启动脚本
ENTRYPOINT ["/usr/local/bin/entrypoint.sh"]